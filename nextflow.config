/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

env {
    // This config file contains the paths where you want the analysis and resulte to me saved
    // and the route to the references
    // All paths must be absolute and end with "/".

    // ---------------------------------------------------------------//
    // Full path to the directory where the whole analysis will take place. Logs will be
    // stored here, and we recommend keeping the rest of folders inside too.
    //
    // workingDir='/absolute/path/to/your/working/directory/'
    workingDir=''

    // ---------------------------------------------------------------//
    // Full path to your raw data.
    // 	sampleName1_*_R1_*.fastq.gz
    // 	sampleName1_*_R2_*.fastq.gz
    // 	...
    // 	sampleNameN_*_R1_*.fastq.gz
    // 	sampleNameN_*_R2_*.fastq.gz
    //
    // readsDir="/absolute/path/to/your/analysis/directory/"
    readsDir="${workingDir}/RAW/"

    // ---------------------------------------------------------------//
    // Full path to the directory where you want your results to be generated.
    //
    // resultsDir="/absolute/path/to/your/results/directory/"
    resultsDir="${workingDir}RESULTS/"

    // ---------------------------------------------------------------//
    // Full path to the directory containg all the references for virus.
    // The directory must contain already processed databases for blast and bowtie mapping
    // with the following structure AND file names:
    // virDB/
    //     BLAST/
    //	 	  blastx/
    //		    VIRUS_blastx.phr
    //		    VIRUS_blastx.pin
    //		    VIRUS_blastx.pog
    //		    VIRUS_blastx.psd
    //		    VIRUS_blastx.psi
    //		    VIRUS_blastx.psq
    //		  blastn/
    //		    VIRUS_blastn.nhr
    //		    VIRUS_blastn.nin
    //		    VIRUS_blastn.nog
    //		    VIRUS_blastn.nsd
    //		    VIRUS_blastn.nsi
    //		    VIRUS_blastn.nsq
    //     WG/
    //		  genome_length.txt
    //		  bwt2/
    //		    virus_all.1.bt2
    //		    ...
    //		    virus_all.n.bt2
    //		    virus_all.rev.1.bt2
    //		    ...
    //		    virus_all.rev.n.bt2
    //
    // virDB="/absolute/path/to/your/virus/reference/directory/"
    virDB="${workingDir}REFERENCES/VIRUS_GENOME_REFERENCE/"

    // ---------------------------------------------------------------//
    // Full path to the directory containg all the references for bacteria.
    // The directory must contain already processed databases for blast and bowtie mapping
    // with the following structure AND file names:
    // bacDB/
    //     BLAST/
    //		  blastn/
    //		    bacteria_blastn.nhr
    //		    bacteria_blastn.nin
    //		    bacteria_blastn.nog
    //		    bacteria_blastn.nsd
    //		    bacteria_blastn.nsi
    //		    bacteria_blastn.nsq
    //     16S/
    //		  bwt2/
    //		    16S.1.bt2
    //		    ...
    //		    16S.n.bt2
    //		    16S.rev.1.bt2
    //		    ...
    //		    16S.rev.n.bt2
    //     WG/
    //		  genome_length.txt
    //		  bwt2/
    //		    WG.1.bt2
    //		    ...
    //		    WG.n.bt2
    //		    WG.rev.1.bt2
    //		    ...
    //		    WG.rev.n.bt2
    //
    // bacDB="/absolute/path/to/your/bacteria/reference/directory/"
    bacDB="${workingDir}REFERENCES/BACTERIA_GENOME_REFERENCE/"

    // ---------------------------------------------------------------//
    // Full path to the directory containg all the references for fungi.
    // The directory must contain already processed databases for blast and bowtie mapping
    // with the following structure AND file names:
    // fungiDB/
    //     BLAST/
    //		  blastn/
    //		    FUNGI_blastn.nhr
    //		    FUNGI_blastn.nin
    //		    FUNGI_blastn.nog
    //		    FUNGI_blastn.nsd
    //		    FUNGI_blastn.nsi
    //		    FUNGI_blastn.nsq
    //     ITS/
    //		  bwt2/
    //		    ITS_all.1.bt2
    //		    ...
    //		    ITS_all.n.bt2
    //		    ITS_all.rev.1.bt2
    //		    ...
    //		    ITS_all.rev.n.bt2
    //     WG/
    //		  genome_length.txt
    //		  bwt2/
    //		    fungi_all.1.bt2
    //		    ...
    //		    fungi_all.n.bt2
    //		    fungi_all.rev.1.bt2
    //		    ...
    //		    fungi_all.rev.n.bt2
    //
    // fungiDB="/absolute/path/to/your/fungi/reference/directory/"
    fungiDB="${workingDir}REFERENCES/FUNGI_GENOME_REFERENCE/"

    // ---------------------------------------------------------------//
    // Full path to the directory containg all the references for human.
    // The directory must contain already processed databases for blast and bowtie mapping
    // with the following structure AND file names:
    // hostDB/
    //     WG/
    //		  genome_length.txt
    //		  bwt2/
    //		    hg38.AnalysisSet.1.bt2
    //		    ...
    //		    hg38.AnalysisSet.n.bt2
    //		    hg38.AnalysisSet.rev.1.bt2
    //		    ...
    //		    hg38.AnalysisSet.rev.n.bt2
    //
    // hostDB="/absolute/path/to/your/human/reference/directory/"
    hostDB="${workingDir}REFERENCES/HUMAN_GENOME_REFERENCE/"

}

manifest {
  homePage = 'https://github.com/BU-ISCIII/PikaVirus'
  description = 'This is a bouild for PikaVirus focuseed in portability by using nextflow and allowing execution form docker and singularity containers'
  mainScript = 'main.nf'
}

// Global default params, used in configs
params {
  ver = '1.0' //Pipeline version
  nf_required_version = '0.27.6' //Minimum version of Nextflow required
}

profiles {

  standard {
    includeConfig "$baseDir/conf/base.config"
  }

  docker {
    includeConfig "$baseDir/conf/docker.config"
  }

  singularity {
  	includeConfig "$baseDir/conf/singularity.config"
  }

  hpc_isciii {
  	includeConfig "$baseDir/conf/hpc_isciii.config"
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// By default output execution reports
timeline {
  enabled = true
  file = "${env.workingDir}/timeline.html"
}
report {
  enabled = true
  file = "${env.workingDir}/report.html"
}
trace {
  enabled = true
  file = "${env.workingDir}/trace.txt"
}
dag {
  enabled = true
  file = "${env.workingDir}/DAG.svg"
}
